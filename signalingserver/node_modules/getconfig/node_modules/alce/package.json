{
  "name": "alce",
  "version": "1.0.0",
  "description": "Accepting Language Config Environment",
  "keywords": [
    "json parser whitespace comments configuration"
  ],
  "dependencies": {
    "esprima": "~1.0.4",
    "estraverse": "~1.3.0"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.2",
    "grunt-mocha-cov": "0.0.7",
    "mocha": "~1.10.0",
    "should": "~1.2.2"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "main": "lib/alce.js",
  "scripts": {
    "test": "./node_modules/.bin/mocha"
  },
  "readme": "# ALCE\n\nAccepting Language Config Environment - \"Alice\"\n\nHuman friendly, machine editable, JSON-like config file format. Takes the JSON out of humans' nightmares.\n\nExtends JSON to allow for:\n\n- Comments\n- Regular expressions\n- Relaxed identifier and syntax handling\n\n## Example\n\n```javascript\n{\n  // Section 1. Global config\n  content: \"foo\",\n\n  // Section 2. Environment config\n  // WARN: A meaningful here be dragons comment\n  otherContent: [\n    // Note that trailing spaces and single quotes don't cause mass chaos\n    'see!',\n  ]\n}\n```\n\n## Usage\n\n```\nnpm install --save alce\n```\n\n```javascript\nvar ALCE = require('ALCE');\n\nvar config = ALCE.parse(configSource, {meta: true});\nconfig.set('key', 'new value');\nconfig.toString();\nconfig.toObject();\n```\n\n## API\n\n### ALCE.parse(configSource, options)\n\nParses a string containing a ACLE source file. Returns an ACLE object.\n\n- `configSource`: String representation of the configuration file\n- `options`: Options hash.\n  - `meta` : Set to truthy to return an editable version of the config that may be reconstructed. Falsy returns generic javascript object. See [#toObject](#toObject).\n  - Formatter options. See [Formatters](#formatters) for more info\n\n### ALCE.stringify(object, options)\n\nConverts a ACLE or javascript object to it's string representation.\n\n- `object`: Object to convert to a string\n- `options`: Formatter options when converting a javascript object. See [Formatters](#formatters) for more info.\n\n### Metadata Objects\n\n#### #get(id)\n\nReturns the ACLE or primitive value stored on the object under a given key. `undefined` if no key exists.\n\n#### #set(id, value)\n\nSets `value` to `id` converting to an ACLE object as necessary. If replacing an existing value, the formatting of that value will be maintained. If creating a new value, or child values, will use the rules defined in the `options` formatters.\n\n#### Array-like methods\n\nACLE instances representing arrays additionally implement:\n\n- `length`\n- `push`\n- `pop`\n- `unshift`\n- `shift`\n- `splice`\n\nAll of which behave as they would if operating on an normal array.\n\n#### #toString()\n\nReturns the current config node contents in as close to the user's input format as possible.\n\n#### #toObject()\n\nReturns a generic javascript object with all config values stripped of any metadata. Useful for passing to other APIs or when metadata is not necessary.\n\n\n### Formatters\n\nFormatters control how newly created nodes are rendering. The may modify the `preamble`, `prologue`,\nand if applicable `innerPrologue`, fields on the new objects to control the formatting around the new object.\n\n\n### #seedIndent(parent, object)\n\nCalled for both parsed and new objects, allowing for the formatter to determine any state information necessary.\n\n```javascript\n  seedIndent: function(parent, object) {\n    if (parent) {\n      object.indent = exports.calcIndent(parent.preamble || '') + (parent.isArray ? '  ' : '');\n    } else {\n      object.indent = '';\n    }\n  },\n```\n\n#### #objectFormatter(parent, object)\n\nCalled when a new object or array is created. Generally `parent` will be an array instance or a property. The `isArray` field may be used to determine if `parent` or `object` is an array.\n\n```javascript\n  objectFormatter: function(parent, object) {\n    object.innerPrologue = '\\n' + object.indent;\n  },\n```\n\n#### #insertFormatter(parent, insert)\n\nCalled when a new value is inserted into an array or object instance. `insert` will be pushed to the end of the `parent.children` list after this operation occurs.\n\n```javascript\n  insertFormatter: function(parent, insert) {\n    var indent = parent.indent || ALCE.calcIndent(parent.preamble);\n    insert.preamble = (parent.children.length ? ',' : '') + '\\n  ' + indent;\n  },\n```\n\n#### #propertyFormatter(parent, property)\n\nCalled when a new property is created. This is useful for defining the `separator` value for a property.\n\n```javascript\n  propertyFormatter: function(parent, property) {\n    property.separator = ': ';\n  }\n```\n\n#### ALCE.TWO_SPACE_FORMATTER\n\nFormatter options that output two space indented data structures with trailing commas. May be passed directly into the `options` parameter for both `parse` and `serialize`.\n\n#### ALCE.calcIndent(preamble)\n\nUtilitity method for formatters. Determines the indentation that should be used for a node relative to a given prefix. This is helpful for the `inserFormatter` to determine where to align new children inserted into an object.\n",
  "readmeFilename": "README.md",
  "_id": "alce@1.0.0",
  "_from": "alce@1.0.0"
}
